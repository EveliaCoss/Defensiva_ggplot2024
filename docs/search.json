[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Programaci√≥n defensiva con ggplot2",
    "section": "",
    "text": "Informaci√≥n general\n\n\nSobre el curso üìåAgenda üìÜ\n\n\nEn esta lecci√≥n, aprender√°s c√≥mo escribir una funci√≥n de forma que seamos capaces de repetir varias operaciones con un comando √∫nico.\n\nFechas: 22 y 24 octubre 2024\nDuraci√≥n del curso: 3 horas\n\nInstructora:\n\nEvelia Lorena Coss-Navarrete - PostDoc, LIIGH-UNAM.\n\nTemas:\nEn esta gu√≠a r√°pida aprender√°s a:\n\nDefiniendo una funci√≥n.\nBuenas practicas en R.\nEl ABC de las funciones.\nEstructuras de control\nProgramaci√≥n defensiva.\nggplot2\n\nCitar y reutilizar el material del curso\nLos datos del curso se pueden reutilizar y adaptar libremente con la debida atribuci√≥n. Todos los datos de los cursos de estos repositorios est√°n sujetos a la licencia Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0).\n\n\n\n\n\n\n\n\n\nTema\nTiempo\n\n\n\n\nüî∑ Secci√≥n 1 - (12:00- 13:00 h) (22 octubre)\n\n\n\n\nConceptos Unix y GNU/Linux\n\n10 min\n\n\n\nMis primeros pasos en Bash\n\n10 min\n\n\n\nEjercicio 1. Ubicaci√≥n en repositorios\n\n5 min\n\n\n\nConsultar informaci√≥n sobre archivos y directorios\n\n10 min\n\n\n\nComprimir y descomprimir archivos\n\n5 min\n\n\n\nEjercicio 2. Descomprimir archivos\n\n5 min\n\n\n‚òï Coffee break (10 min) - (13:00-13:10) ‚òï\n10 min\n\n\nüî∑¬† Secci√≥n 2 - (13:10 - 14:00 h)\n\n\n\n\nAn√°lisis de datos de RNA-Seq\n\n20 min\n\n\n\nEjercicio 3. Manejando datos\n\n10 min\n\n\nüî∑¬† Secci√≥n 3 - (12:00 - 13:00 h) (24 octubre)\n\n\n\n\nWildcards y Streams\n\n10 min\n\n\n\nEjercicio 4. Wildcard\n\n10 min\n\n\n\nOperadores de redirecci√≥n de datos I/O\n\n10 min\n\n\n\nEjercicio 5. Redirecci√≥n de salidas\n\n10 min\n\n\n\nScripts en Bash\n\n10 min\n\n\n\n\n\n\n\n--------------------------------------------------------------------\nCursos hechos con amor üíú"
  },
  {
    "objectID": "Parte1.html#materiales-informativos",
    "href": "Parte1.html#materiales-informativos",
    "title": "1¬† Buenas pr√°cticas en Bioinform√°tica",
    "section": "1.1 Materiales informativos",
    "text": "1.1 Materiales informativos\n\nCurso de Joselyn Cristina Ch√°vez Fuentes\nMe ayudo mucho este Video\nDocumentaci√≥n de funciones de Andr√©s Arredondo Cruz\n\nüí™ Estuve muy intensa viendo su codigo. Muchas gracias por tenerlos publico."
  },
  {
    "objectID": "Parte1.html#un-algoritmo-nos-permite-resolver-un-problema",
    "href": "Parte1.html#un-algoritmo-nos-permite-resolver-un-problema",
    "title": "1¬† Buenas pr√°cticas en Bioinform√°tica",
    "section": "1.2 Un algoritmo nos permite resolver un problema ‚≠ê",
    "text": "1.2 Un algoritmo nos permite resolver un problema ‚≠ê\nUn algoritmo es un m√©todo para resolver un problema mediante una serie de pasos definidos, precisos y finitos.\n\nDefinido: si se sigue dos veces, se obtiene el mismo resultado. Es reproducible.\nPreciso: implica el orden de realizaci√≥n de cada uno de los pasos.\nFinito: Tiene un numero determinado de pasos, implica que tiene un fin.\n\n\nUn algoritmo podemos definirlo como un programa o software."
  },
  {
    "objectID": "Parte1.html#para-escribir-un-buen-software-necesitas",
    "href": "Parte1.html#para-escribir-un-buen-software-necesitas",
    "title": "1¬† Buenas pr√°cticas en Bioinform√°tica",
    "section": "1.3 Para escribir un buen software necesitas:",
    "text": "1.3 Para escribir un buen software necesitas:\n\nEscribir c√≥digo mantenible (maintainable code), usar control de versiones (version control) y rastreadores de problemas (issue trackers), revisiones de c√≥digo (code reviews), pruebas unitarias (unit testing) y automatizaci√≥n de tareas (task automation).\nWilson, et al.¬†2014. PLOS Biology\n\nCon el fin de previnir retracciones.\n\n\n\n\n\n\nPasos para escribir un buen software\n\n\n\n\nAn√°lisis del problema / Definir el problema\nDise√±o del algoritmo / Dise√±o del programa\nCodificaci√≥n / Escribir el c√≥digo\nCompilaci√≥n y ejecuci√≥n del programa\nVerificaci√≥n / Realizar pruebas\nDepuraci√≥n / Detectar los errores y corregirlos\n\n\nProgramacion defensiva\n\n\nDocumentaci√≥n"
  },
  {
    "objectID": "Parte1.html#paso-7-documentaci√≥n",
    "href": "Parte1.html#paso-7-documentaci√≥n",
    "title": "1¬† Buenas pr√°cticas en Bioinform√°tica",
    "section": "1.4 Paso 7: Documentaci√≥n",
    "text": "1.4 Paso 7: Documentaci√≥n\n\n\n\n\n\n\nNote\n\n\n\n\nAutor (author): Su nombre\nDia (date): Fecha de creaci√≥n\nPaquetes (packages)\nDirectorio de trabajo (Working directory): En que carpeta se encuentra tu datos y programa.\nInformaci√≥n descriptiva del programa (Description): ¬øPara qu√© sirve el programa? Ej: El siguiente programa realiza la suma de dos numeros enteros a partir de la entrada del usuario y posteriormente la imprime en pantalla.\nUsage ¬øC√≥mo se utiliza?\nArgumentos (Arguments)\n\nInformaci√≥n de entrada (Data Inputs): Ej: Solo numeros enteros (sin decimales).\nInformaci√≥n de salida (Outpus): Graficas, figuras, tablas, etc."
  },
  {
    "objectID": "Parte1.html#puntos-claves-para-buenas-practicas-en-bioinfo",
    "href": "Parte1.html#puntos-claves-para-buenas-practicas-en-bioinfo",
    "title": "1¬† Buenas pr√°cticas en Bioinform√°tica",
    "section": "1.5 Puntos claves para buenas practicas en bioinfo ‚≠ê",
    "text": "1.5 Puntos claves para buenas practicas en bioinfo ‚≠ê\n\nEscriba programas para personas, no para computadoras (Documenta qu√© hace y por qu√©). - Se coherente en la nomenclatura, indentaci√≥n y otros aspectos del estilo.\nDivide los programas en funciones cortas de un solo prop√≥sito. üíª üìö\nNo repitas tu c√≥digo. Crea pasos reproducibles o que se repitan por si solas. ‚û∞\nPlanifique los errores (Programacion defensiva) üö©\nOptimice el software s√≥lo despu√©s de que funcione correctamente. - Si funciona no lo modifiques, simplificalo.\nColaborar - Busque siempre bibliotecas de software bien mantenidas que hagan lo que necesita. üë•\n\n\n\n\n\n\n\nEjemplo de como realizo mis documentos üíú\n\n\n\nAqui les dejo el script que les doy a mis alumnos VisualizacionDatos.R del curso de An√°lisis de datos de RNA-Seq."
  },
  {
    "objectID": "Parte1.html#referencias",
    "href": "Parte1.html#referencias",
    "title": "1¬† Buenas pr√°cticas en Bioinform√°tica",
    "section": "1.6 Referencias",
    "text": "1.6 Referencias\n\nHaydee tutorial: Temas Selectos de An√°lisis Num√©rico y Computaci√≥n Cient√≠fica: Computo cient√≠fico para el an√°lisis de datos\nAlejandra Medina tutorial: Control de versiones con GitHub y RStudio\nWilson, et al.¬†2014. Best Practices for Scientific Computing. PLOS Biology\nEvelia Coss - tutorial Buenas practicas en R\nEvelia Coss - Make your CV tutorial"
  },
  {
    "objectID": "Parte2.html",
    "href": "Parte2.html",
    "title": "2¬† El ABC de las funciones",
    "section": "",
    "text": "3 Gapminder\nLa fundaci√≥n Gapminder7¬†es una organizaci√≥n sin fines de lucro con sede en Suecia que promueve el desarrollo global mediante el uso de estad√≠sticas que pueden ayudar a reducir mitos comunes e historias sensasionalistas sobre la salud y la econom√≠a mundial. Una selecci√≥n importante de datos ya est√° cargada en la librer√≠a¬†dslabs¬†en el data frame¬†gapminder."
  },
  {
    "objectID": "Parte2.html#tips-para-generar-una-funci√≥n",
    "href": "Parte2.html#tips-para-generar-una-funci√≥n",
    "title": "2¬† El ABC de las funciones",
    "section": "2.1 Tips para generar una funci√≥n",
    "text": "2.1 Tips para generar una funci√≥n\n\n\n\n\n\nEn R al igual que en otros lenguajes de programaci√≥n podemos crear nuestras propias funciones.\nLa estructura de una funci√≥n en R es la siguiente:\n\n\nCode\nmi_funcion &lt;- function(parametros){\n  acciones\n  resultado a regresar\n}"
  },
  {
    "objectID": "Parte2.html#estructuras-de-control",
    "href": "Parte2.html#estructuras-de-control",
    "title": "2¬† El ABC de las funciones",
    "section": "2.2 Estructuras de control",
    "text": "2.2 Estructuras de control\n\nLas estructuras de control nos permiten controlar la manera en que se ejecuta nuestro c√≥digo.\nLas estructuras de control establecen condicionales en nuestros c√≥digo. Por ejemplo, qu√© condiciones deben cumplirse para realizar una operaci√≥n o qu√© debe ocurrir para ejecutar una funci√≥n.\nEsto es de gran utilidad para determinar la l√≥gica y el orden en que ocurren las operaciones, en especial al definir funciones.\n\nLas estructuras de control m√°s usadas:\n\n\n\nEstructura de control\nDescripci√≥n\n\n\n\n\nif, else\nSi, de otro modo\n\n\nfor\nPara cada uno en\n\n\nwhile\nMientras\n\n\nbreak\nInterrupci√≥n\n\n\nnext\nSiguiente\n\n\ncase_when\nConducional con diversas salidas"
  },
  {
    "objectID": "Parte2.html#if-else",
    "href": "Parte2.html#if-else",
    "title": "2¬† El ABC de las funciones",
    "section": "2.3 if, else",
    "text": "2.3 if, else\n\nif (si) es usado cuando deseamos que una operaci√≥n se ejecute √∫nicamente cuando una condici√≥n se cumple.\n\nSI esta condici√≥n es cierta, ENTONCES haz estas operaciones.\n\nelse (de otro modo) es usado para indicarle a R qu√© hacer en caso de la condici√≥n de un if no se cumpla.\n\nSI esta condici√≥n es es cierta, ENTONCES haz estas operaciones, DE OTRO MODO haz estas otras operaciones.\n\n\n\n\nCode\nIF you are happy THEN\n    smile\nELSE\n    frown\nENDIF\n\n\nSi se cumple la condici√≥n y se muestra ‚ÄúVerdadero‚Äù\n\n\nCode\nif(4 &gt; 3) {\n  \"Verdadero\"\n} else {\n  \"Falso\"\n}\n\n\n[1] \"Verdadero\""
  },
  {
    "objectID": "Parte2.html#for-for-loop",
    "href": "Parte2.html#for-for-loop",
    "title": "2¬† El ABC de las funciones",
    "section": "2.4 for (for loop)",
    "text": "2.4 for (for loop)\nSu estructura es la siguiente:\n\n\nCode\nfor(elemento in objeto) {\n  operacion_con_elemento\n}\n\n\nCon lo anterior le decimos a R:\n\nPara cada elemento (contador) en un objeto, haz la siguiente operaci√≥n.\n\nVamos a obtener el cuadrado de cada uno de los elementos en un vector num√©rico del 1 al 6, que representa las caras de un dado.\n\n\nCode\ndado &lt;- 1:6\nmi_vector &lt;- NULL # variable de almacen, vector vacio\n# Cara es el contador, que agarra CADA valor de dado\n# Empezando con 1 hasta el 6, teniendo 6 iteraciones\nfor(cara in dado) {\n  mi_vector[cara] &lt;- cara ^ 2\n}\nmi_vector\n\n\n[1]  1  4  9 16 25 36"
  },
  {
    "objectID": "Parte2.html#while",
    "href": "Parte2.html#while",
    "title": "2¬† El ABC de las funciones",
    "section": "2.5 while",
    "text": "2.5 while\nEste es un tipo de bucle que ocurre mientras una condici√≥n es verdadera (TRUE). La operaci√≥n se realiza hasta que se se llega a cumplir un criterio previamente establecido.\nEl modelo de while es:\n\n\nCode\nwhile(condicion){\n  operaciones\n}\n\n\nCon esto le decimos a R:\n\nMIENTRAS esta condici√≥n sea VERDADERA, haz estas operaciones.\n\nLa condici√≥n generalmente es expresada como el resultado de una o varias operaciones de comparaci√≥n, pero tambi√©n puede ser el resultado de una funci√≥n.\nEjemplo:\n\nPrimero, tomar√° un n√∫mero al azar del 1 al 10, y lo sumar√° a valor.\nSegundo, le sumar√° 1 a conteo cada que esto ocurra, de esta manera sabremos cu√°ntas iteraciones ocurrieron para llegar a un valor que no sea menor a 50.\n\n\n\nCode\n# declarar dos vectores vacios\nconteo &lt;-  0\nvalor &lt;- 0\nwhile(valor &lt; 50) {\n  # Sample va UN valor aleatorio de 1 a 10\n  valor &lt;- valor + sample(x = 1:10, size = 1) \n  conteo &lt;- conteo + 1\n}\nvalor\n\n\n[1] 51\n\n\nCode\nconteo\n\n\n[1] 10\n\n\nEl ciclo se va a repetir mientras¬†valor¬†sea menos a 50.\n\n2.5.1 Cuando la condici√≥n no es TRUE, no pasa nada\n\n\nCode\nconteo &lt;- 0\nwhile(\"dado\" == \"ficha\") {\n  conteo &lt;- conteo + 1\n}\nconteo\n\n\n[1] 0"
  },
  {
    "objectID": "Parte2.html#break-y-next",
    "href": "Parte2.html#break-y-next",
    "title": "2¬† El ABC de las funciones",
    "section": "2.6 break y next",
    "text": "2.6 break y next\nbreak y next son palabras reservadas en R, no podemos asignarles nuevos valores y realizan una operaci√≥n espec√≠fica cuando aparecen en nuestro c√≥digo.\nbreak nos permite interrumpir un bucle, mientras que next nos deja avanzar a la siguiente iteraci√≥n del bucle, ‚Äúsalt√°ndose‚Äù la actual. Ambas funcionan para for y while.\n\n2.6.1 Usando break\nPara interrumpir un bucle con break, necesitamos que se cumpla una condici√≥n. Cuando esto ocurre, el bucle se detiene, aunque existan elementos a los cuales a√∫n podr√≠a aplicarse.\nInterrumpimos un for cuando i es igual a 3, aunque a√∫n queden 7 elementos en el objeto.\n\n\nCode\nfor(i in 1:10) {\n  if(i == 3) {\n    break\n  }\n  print(i)\n}\n\n\n[1] 1\n[1] 2\n\n\n\n\n2.6.2 Usando break y while\n\n\nCode\nnumero &lt;- 20\nwhile(numero &gt; 5) {\n  if(numero == 15) {\n    break\n  }\n  numero &lt;- numero - 1\n}\nnumero\n\n\n[1] 15\n\n\n\n\n2.6.3 Usando next\nPor su parte, usamos next para ‚Äúsaltarnos‚Äù una iteraci√≥n en un bucle. Cuando la condici√≥n se cumple, esa iteraci√≥n es omitida.\n\n\nCode\nfor(i in 1:4) {\n  if(i == 3) {\n    next\n  }\n  print(i)\n}\n\n\n[1] 1\n[1] 2\n[1] 4"
  },
  {
    "objectID": "Parte2.html#case_when",
    "href": "Parte2.html#case_when",
    "title": "2¬† El ABC de las funciones",
    "section": "2.7 case_when()",
    "text": "2.7 case_when()\nEsquema general:\n\n\nCode\nINPUT color\nCASE color of\n    red: PRINT \"red\"\n    green: PRINT \"green\"\n    blue: PRINT \"blue\"\nOTHERS\n    PRINT \"Please enter a value color\"\nENDCASE\n\n\nEjemplo:\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nx &lt;- 1:20\ncase_when(\n  x %% 35 == 0 ~ \"fizz buzz\",\n  x %% 5 == 0 ~ \"fizz\",\n  x %% 7 == 0 ~ \"buzz\",\n  .default = as.character(x)\n)\n\n\n [1] \"1\"    \"2\"    \"3\"    \"4\"    \"fizz\" \"6\"    \"buzz\" \"8\"    \"9\"    \"fizz\"\n[11] \"11\"   \"12\"   \"13\"   \"buzz\" \"fizz\" \"16\"   \"17\"   \"18\"   \"19\"   \"fizz\""
  },
  {
    "objectID": "Parte2.html#actividad-grupal",
    "href": "Parte2.html#actividad-grupal",
    "title": "2¬† El ABC de las funciones",
    "section": "3.1 Actividad grupal",
    "text": "3.1 Actividad grupal\nFormular preguntas es una forma muy √∫til de limitar el numero exponencial de caminos a tomar, en particular las preguntas concisas y las hip√≥tesis pueden servir para eliminar el numero de dimensiones y variables que nos son inmediatamente relevantes para responderlas.\nLas siguientes preguntas se toman c√≥mo ejemplo para nuestro an√°lisis:\n\n¬øQu√© pa√≠s tiene la esperanza de vida m√°s alta en 2007?\n¬øQu√© pa√≠s tiene el aumento m√°s dr√°stico en la esperanza de vida entre 2007 y 2002?\n¬øHay alg√∫n pa√≠s que haya aumentado en su esperanza de vida en los √∫ltimos a√±os?\n¬øHay alg√∫n pa√≠s que hayan descendido en su esperanza de vida en los √∫ltimos a√±os?\n\n\n3.1.1 Paso 1. Leer los datos y ver la estructura\n\n\nCode\nlibrary(gapminder) # paquete de cran\nlibrary(tidyverse)\n\n\n‚îÄ‚îÄ Attaching core tidyverse packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 2.0.0 ‚îÄ‚îÄ\n‚úî forcats   1.0.0     ‚úî readr     2.1.5\n‚úî ggplot2   3.5.1     ‚úî stringr   1.5.1\n‚úî lubridate 1.9.3     ‚úî tibble    3.2.1\n‚úî purrr     1.0.2     ‚úî tidyr     1.3.1\n‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ\n‚úñ dplyr::filter() masks stats::filter()\n‚úñ dplyr::lag()    masks stats::lag()\n‚Ñπ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ngap &lt;- gapminder\nhead(gap)\n\n\n# A tibble: 6 √ó 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\n\nCode\nstr(gap)\n\n\ntibble [1,704 √ó 6] (S3: tbl_df/tbl/data.frame)\n $ country  : Factor w/ 142 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ continent: Factor w/ 5 levels \"Africa\",\"Americas\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ year     : int [1:1704] 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...\n $ lifeExp  : num [1:1704] 28.8 30.3 32 34 36.1 ...\n $ pop      : int [1:1704] 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ...\n $ gdpPercap: num [1:1704] 779 821 853 836 740 ...\n\n\n¬øQu√© nos dicen las columnas?\n\ncountry: factor with 142 levels\ncontinent: factor with 5 levels\nyear: oscila entre 1952 y 2007 en incrementos de 5 a√±os\nlifeExp: esperanza de vida al nacer, en a√±os\npop: poblaci√≥n\ngdpPercap: GDP per capita (US$, inflation-adjusted) / PIB per c√°pita (US$, ajustado a la inflaci√≥n)\n\n\n\n3.1.2 Paso 2. Seleccionar variables\nUna vez que determinamos que nuestra data esta completa y que conocemos la estructura de nuestras variables, podemos limpiar nuestra informaci√≥n, revisando los formatos de fechas, quitando NA‚Äôs y NULL, as√≠ como eliminar la informaci√≥n que no arroja valor para responder nuestras preguntas.\n\n\nCode\nEDA &lt;- gap %&gt;% \n  select(country, year, lifeExp)\nhead(EDA)\n\n\n# A tibble: 6 √ó 3\n  country      year lifeExp\n  &lt;fct&gt;       &lt;int&gt;   &lt;dbl&gt;\n1 Afghanistan  1952    28.8\n2 Afghanistan  1957    30.3\n3 Afghanistan  1962    32.0\n4 Afghanistan  1967    34.0\n5 Afghanistan  1972    36.1\n6 Afghanistan  1977    38.4\n\n\n\n\n3.1.3 Paso 3. ¬øQu√© pa√≠s tiene la esperanza de vida m√°s alta en 2007?\nNuestra primera aproximaci√≥n ser√≠a realizar un ranking de los p√°ises con la esperanza de vida m√°s alta del 2007 lo cu√°l podemos realizarlo muy facilmente usando la funci√≥n¬†arrange().\n\n\nCode\nRanking &lt;- EDA %&gt;% \n  filter(year == 2007) %&gt;% \n  arrange(desc(lifeExp))\n\nhead(Ranking)\n\n\n# A tibble: 6 √ó 3\n  country           year lifeExp\n  &lt;fct&gt;            &lt;int&gt;   &lt;dbl&gt;\n1 Japan             2007    82.6\n2 Hong Kong, China  2007    82.2\n3 Iceland           2007    81.8\n4 Switzerland       2007    81.7\n5 Australia         2007    81.2\n6 Spain             2007    80.9\n\n\nConcluimos que la resuesta es¬†Jap√≥n¬†con 82.6 a√±os\n\n\n3.1.4 Paso 4. ¬øQu√© pa√≠s tiene el aumento m√°s dr√°stico en la esperanza de vida entre 2007 y 2002?\nEn este caso la soluci√≥n requiere que hagamos ajustes a nuestra tabla para poder calcular una nueva variable llamada delta que es la diferencia entre la esperanza de vida del 2007 VS la de 2002.\n\n\nCode\n# Extraer datos de 2002\nY2002 &lt;- EDA %&gt;% \n  filter(year == 2002) %&gt;%\n  rename(LExp2002 = lifeExp) %&gt;% \n  select(-year)\n# Extraer datos de 2007\nY2007 &lt;- EDA %&gt;% \n  filter(year == 2007) %&gt;%\n  rename(LExp2007 = lifeExp) %&gt;% \n  select(-year)\n# Unir informacion por columnas\nLifeExpDelta &lt;- merge(Y2002,Y2007)\n# Obtener el valor de Delta (diferencia entre la esperanza de vida)\nDelta &lt;- LifeExpDelta %&gt;%\n  mutate(delta = (LExp2007-LExp2002)/LExp2002) %&gt;% \n  arrange(desc(delta))\nhead(Delta)\n\n\n   country LExp2002 LExp2007      delta\n1 Botswana   46.634   50.728 0.08779002\n2 Zimbabwe   39.989   43.487 0.08747406\n3   Zambia   39.193   42.384 0.08141760\n4   Uganda   47.813   51.542 0.07799134\n5   Malawi   45.009   48.303 0.07318536\n6   Rwanda   43.413   46.242 0.06516481\n\n\nBotswana es el pais con el aumento mas drastico en la esperanza de vida.\n\n\n3.1.5 Paso 5. ¬øHay alg√∫n pa√≠s que haya aumentado en su esperanza de vida en los √∫ltimos a√±os?\n\n\nCode\ngap %&gt;%\n  group_by(continent, country) %&gt;%\n  select(country, year, continent, lifeExp) %&gt;%\n  mutate(le_delta = lifeExp - lag(lifeExp, 1)) %&gt;%\n  summarize(best_le_delta = max(le_delta, na.rm = TRUE)) %&gt;%\n  arrange(-best_le_delta) %&gt;%\n  head(5)\n\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 √ó 3\n# Groups:   continent [3]\n  continent country   best_le_delta\n  &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;\n1 Asia      Cambodia          19.7 \n2 Asia      China             13.9 \n3 Africa    Rwanda            12.5 \n4 Africa    Mauritius          7.10\n5 Europe    Bulgaria           7.01\n\n\n\n\n3.1.6 Paso 6. ¬øHay alg√∫n pa√≠s que haya descendido en su esperanza de vida en los √∫ltimos a√±os?\n\n\nCode\ngap %&gt;%\n  group_by(continent, country) %&gt;%\n  select(country, year, continent, lifeExp) %&gt;%\n  mutate(le_delta = lifeExp - lag(lifeExp, 1)) %&gt;%\n  summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %&gt;%\n  arrange(worst_le_delta) %&gt;%\n  head(5)\n\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 √ó 3\n# Groups:   continent [1]\n  continent country   worst_le_delta\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;\n1 Africa    Rwanda             -20.4\n2 Africa    Zimbabwe           -13.6\n3 Africa    Lesotho            -11.0\n4 Africa    Swaziland          -10.4\n5 Africa    Botswana           -10.2\n\n\n\n\n\n\n\n\nEjercicios\n\n\n\n\nCalcula la media la esperanza de vida por continente y a√±o y pres√©ntala como un data.frame. ¬øCu√°l continente tuvo la mayor y menor esperanza de vida en el a√±o 1952 y 2007?\nCarga la base de datos iris, y crea un data.frame con la media, el valor m√°ximo y m√≠nimo de cada una de las variables agrupado por especie.\nExplora la p√°gina y busca una base de datos donde puedas aplicar las funciones anteriores y que tenga sentido lo que est√°s presentando de resultados."
  },
  {
    "objectID": "Parte2.html#material-suplementario",
    "href": "Parte2.html#material-suplementario",
    "title": "2¬† El ABC de las funciones",
    "section": "3.2 Material suplementario",
    "text": "3.2 Material suplementario\n\nSoftware Carpentry - funciones\nWriting Functions in R\nPackage ‚Äúgapminder‚Äù\nEDA Gapminder\nHaydee tutorial: Temas Selectos de An√°lisis Num√©rico y Computaci√≥n Cient√≠fica: Computo cient√≠fico para el an√°lisis de datos"
  },
  {
    "objectID": "Parte3.html",
    "href": "Parte3.html",
    "title": "3¬† Programaci√≥n defensiva",
    "section": "",
    "text": "4 Scripts\nUn script es una colecci√≥n de varias instrucciones de R escritas en un archivo. La extensi√≥n de los script en R es¬†.r¬†o¬†.R. En los scripts podemos colocar comentarios, paquetes, instrucciones de tal forma que pueda ser ejecutado sin problemas."
  },
  {
    "objectID": "Parte3.html#usando-stop-con-if",
    "href": "Parte3.html#usando-stop-con-if",
    "title": "3¬† Programaci√≥n defensiva",
    "section": "3.1 Usando stop() con if()",
    "text": "3.1 Usando stop() con if()\nEl argumento temp debe ser un valor numeric. Para crear un error, podemos usar la funci√≥n stop(). Por ejemplo, dado que el argumento temp debe ser un vector numeric, podr√≠amos probarlo con un condicional if() y devolver un error si la condici√≥n no se cumple. Podr√≠amos agregar esto a nuestra funci√≥n de la siguiente manera:\n\n\nCode\nfahr_to_kelvin &lt;- function(temp) {\n  if (!is.numeric(temp)) {\n    stop(\"temp must be a numeric vector.\") # condiciones\n  }\n  kelvin &lt;- ((temp - 32) * (5 / 9)) + 273.15\n  return(kelvin)\n}\n\n\n\n3.1.1 Verificaci√≥n / Realizar pruebas\n\n\nCode\nfahr_to_kelvin(temp = 32)\n\n\n[1] 273.15\n\n\n\n\nCode\nfahr_to_kelvin(temp = \"A\")\n# Error in fahr_to_kelvin(temp = \"A\") : temp must be a numeric vector.\n\n\n\n\n3.1.2 Probando condiciones con stopifnot()\n\n\nCode\nfahr_to_kelvin &lt;- function(temp) {\n  stopifnot(is.numeric(temp)) # condiciones\n  kelvin &lt;- ((temp - 32) * (5 / 9)) + 273.15\n  return(kelvin)\n}\n\n\n\n\n3.1.3 Verificaci√≥n / Realizar pruebas\n\n\nCode\nfahr_to_kelvin(temp = 32)\n\n\n[1] 273.15\n\n\n\n\nCode\nfahr_to_kelvin(temp = as.factor(32))\n# Error in fahr_to_kelvin(temp = as.factor(32)) :\n# is.numeric(temp) is not TRUE"
  },
  {
    "objectID": "Parte3.html#usando-warning-y-message-con-if",
    "href": "Parte3.html#usando-warning-y-message-con-if",
    "title": "3¬† Programaci√≥n defensiva",
    "section": "3.2 Usando warning() y message() con if()",
    "text": "3.2 Usando warning() y message() con if()\n\n\nCode\nsquareX &lt;- function(x) {\n    if (is.character(x)) {\n        warning(\"Converting x to numeric\")\n        x &lt;- as.numeric(x)\n    } else {\n        # the type checking done here is of course very incomplete\n        message(\"x appears to be numeric\")\n    }\n    x ^ 2 \n}\n\n\n\nVerificaci√≥n / Realizar pruebas\n\n\nCode\nsquareX(\"4\")\n\n\nWarning in squareX(\"4\"): Converting x to numeric\n\n\n[1] 16\n\n\n\n\nCode\nsquareX(4)\n\n\nx appears to be numeric\n\n\n[1] 16"
  },
  {
    "objectID": "Parte3.html#usando-el-paquete-assertthat",
    "href": "Parte3.html#usando-el-paquete-assertthat",
    "title": "3¬† Programaci√≥n defensiva",
    "section": "3.3 Usando el paquete assertthat",
    "text": "3.3 Usando el paquete assertthat\nInstalar el paquete:\n\n\nCode\ninstall.packages(\"assertthat\")\n\n\nEl paquete assertthat realiza lo mismo que stopifnot.\nEjemplos:\n\n\nCode\nlibrary(assertthat) ## Mensajes de error\nx &lt;- 1:10\nstopifnot(is.character(x))\n# Error: is.character(x) is not TRUE\nassert_that(is.character(x))\n# Error: x is not a character vector\nassert_that(length(x) == 5)\n# Error: length(x) not equal to 5\nassert_that(is.numeric(x))\n# [1] TRUE\n\n\nPara m√°s informaci√≥n sobre¬†assertthat¬†puedes leer su¬†manual.\n\n\nCode\nfoo_message &lt;- function(x) {\n    assertthat::assert_that(x == 1, msg = \"x must always be 1\")\n    \"yay\"\n} \n# verficacion\nfoo_message(1)\n\n\n[1] \"yay\""
  },
  {
    "objectID": "Parte3.html#material-suplementario",
    "href": "Parte3.html#material-suplementario",
    "title": "3¬† Programaci√≥n defensiva",
    "section": "4.1 Material suplementario",
    "text": "4.1 Material suplementario\n\nSoftware Carpentry - Programaci√≥n defensiva\nHaydee tutorial: Temas Selectos de An√°lisis Num√©rico y Computaci√≥n Cient√≠fica: Computo cient√≠fico para el an√°lisis de datos"
  },
  {
    "objectID": "Parte4.html#desglose-de-las-capas-comunes",
    "href": "Parte4.html#desglose-de-las-capas-comunes",
    "title": "4¬† ggplot2",
    "section": "4.1 Desglose de las capas comunes",
    "text": "4.1 Desglose de las capas comunes\nA continuaci√≥n se presenta un desglose de cada una de las capas de la GG y los argumentos comunes de cada una de ellas que pueden servir de referencia:\n\nDatos:\n\nsus datos, en formato tidy o dataframe, proporcionar√°n los ingredientes para su trazado\nutilice las t√©cnicas dplyr para preparar los datos para un formato de trazado √≥ptimo\npor lo general, esto significa que debe tener una fila por cada observaci√≥n que desea trazar\n\nEst√©tica(Aesthetics / aes), para hacer visibles los datos\n\nx, y: variable a lo largo de los ejes x e y.\ncolour: color de las variables seg√∫n los datos.\nfill: color interior de la zona o relleno.\ngroup: a qu√© grupo pertenece una geom.\nshape: la figura utilizada para trazar un punto.\nlinetype: tipo de l√≠nea utilizada (s√≥lida, discontinua, etc.).\nsize: escala de tama√±o para una dimensi√≥n extra\nalpha: transparencia del objeto geom√©trico\n\nObjetos geom√©tricos(geoms - determina el tipo de trazado)\n\ngeom_point(): gr√°fico de dispersi√≥n\ngeom_line(): l√≠neas que conectan puntos aumentando el valor de x\ngeom_path(): l√≠neas que conectan puntos en secuencia de aparici√≥n\ngeom_boxplot(): gr√°fico de caja y bigotes para variables categ√≥ricas\ngeom_bar(): gr√°ficos de barras para el eje x categ√≥rico\ngeom_histogram(): histograma para eje x continuo\ngeom_violin(): n√∫cleo de distribuci√≥n de la dispersi√≥n de datos\ngeom_smooth(): l√≠nea de funci√≥n basada en datos\n\nFacetas:\n\nfacet_wrap(): una variable discreta.\nfacet_grid(): dos variables discretas.\n\nEstad√≠sticas:\n\nsimilar a geoms, pero computada\nmuestran medias, recuentos y otros res√∫menes estad√≠sticos de los datos\n\nCoordenadas- ajuste de datos en una p√°gina\n\ncoord_cartesian(): para establecer l√≠mites\ncoord_polar(): para gr√°ficos circulares\ncoord_map(): para diferentes proyecciones cartogr√°ficas\ncoord_flip(): voltear axis.\n\nTemas:\n\npar√°metros visuales generales\nfuentes, colores, formas, contornos\n\n\nM√°s informaci√≥n en en el Workshop 3: Introduction to data visualisation with ggplot2\n\n4.1.1 Paso 7. Integrar todo y generar un script y funcion\n\n\nCode\n# paquetes\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(gapminder)\n\n# Funcion para analizar la esperanza de vida\nanalizar_esperanza_vida &lt;- function(paises = NULL, anio_inicio = NULL, anio_fin = NULL) {\n  # Filtrar por pa√≠ses (si se especifican)\n  datos_filtrados &lt;- gapminder %&gt;%\n    # Verificar Si los paises estan en el dataset\n     filter(if (!is.null(paises)) {\n        message(\"Extraer informacion del pais\")\n       # entonces\n        country %in% paises\n      } else {\n        # Se da un TRUE, cuando no tenemos el pais en los datos. Lo que significa que no se realiza ning√∫n filtrado, y se mantienen todos los pa√≠ses.\n        warning(\"No se encuentra el pais\")\n        TRUE\n      }) %&gt;%\n    # Verificar que existe el year de inicio\n    filter(if (!is.null(anio_inicio)) {\n        message(\"Extraer informacion del pais\")\n       # entonces\n        year &gt;= anio_inicio\n      } else {\n        # Se da un TRUE, cuando no tenemos el ano en los datos. Lo que significa que no se realiza ning√∫n filtrado, y se mantienen todos los anos.\n        warning(\"No se encuentra el pais\")\n        TRUE\n      }) %&gt;%\n      # Verificar que existe el year de fin\n    filter(if (!is.null(anio_fin)) {\n        message(\"Extraer informacion del pais\")\n       # entonces\n        year &lt;= anio_fin\n      } else {\n        # Se da un TRUE, cuando no tenemos el pais en los datos. Lo que significa que no se realiza ning√∫n filtrado, y se mantienen todos los pa√≠ses.\n        warning(\"No se encuentra el pais\")\n        TRUE\n      })\n  \n  # Verificar si hay datos despu√©s de filtrar\n  if (nrow(datos_filtrados) == 0) {\n    stop(\"No hay datos disponibles para los criterios especificados.\")\n  }\n  \n  # Resumen de la esperanza de vida\n  resumen_vida &lt;- datos_filtrados %&gt;%\n    group_by(country) %&gt;%\n    summarise(esperanza_media = mean(lifeExp),\n              max_esperanza = max(lifeExp),\n              min_esperanza = min(lifeExp)) %&gt;%\n    arrange(desc(esperanza_media))\n  \n  print(\"Resumen de la esperanza de vida:\")\n  print(resumen_vida)\n  \n  # Gr√°fico de esperanza de vida a lo largo del tiempo\n  ggplot(datos_filtrados, aes(x = year, y = lifeExp, color = country)) +\n    geom_line() +\n    labs(title = \"Evoluci√≥n de la esperanza de vida\",\n         x = \"A√±o\",\n         y = \"Esperanza de vida\") +\n    theme_minimal()\n}\n\n\nEjecuta el script:\n\n\nCode\n# Uso de la funci√≥n con un ejemplo\nanalizar_esperanza_vida(paises = c(\"Mexico\", \"Canada\", \"Japan\"), anio_inicio = 1950, anio_fin = 2000)\n\n\nExtraer informacion del pais\nExtraer informacion del pais\nExtraer informacion del pais\n\n\n[1] \"Resumen de la esperanza de vida:\"\n# A tibble: 3 √ó 4\n  country esperanza_media max_esperanza min_esperanza\n  &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n1 Canada             73.8          78.6          68.8\n2 Japan              73.3          80.7          63.0\n3 Mexico             63.4          73.7          50.8\n\n\n\n\n\n\n\n\n\n\n\nEjercicios\n\n\n\nTe invitamos a que corras el ejercicio propuesto en el script ggplo2_R_Ladies_Morelia_.R por Fernanda Miron."
  },
  {
    "objectID": "Parte4.html#material-suplementario",
    "href": "Parte4.html#material-suplementario",
    "title": "4¬† ggplot2",
    "section": "4.2 Material suplementario",
    "text": "4.2 Material suplementario\n\nggplot2: Elegant Graphics for Data Analysis (3e)"
  },
  {
    "objectID": "Parte5.html",
    "href": "Parte5.html",
    "title": "Proyecto",
    "section": "",
    "text": "Instrucciones:\n\n\n\nTrabajo individual o en equipo (3 personas):\n\nSeleccionar uno de los Datasets precargados en R.\nAnaliza los datos y genera 3 preguntas que puedas contestar con las variables que tienes.\nGenera un script completo que nos conteste las preguntas realizadas y nos de graficas de cada uno.\nNOTA: No olvides agregar la programacion defensiva y todo lo visto en clase.\nGenera una exposicion breve de 15 min en total.\nExposicion el 6 de diciembre"
  }
]