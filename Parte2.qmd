# El ABC de las funciones

Las funciones reúnen una secuencia de operaciones como un todo, almacenando para su uso continuo. Las funciones proveen:

-   un **NOMBRE** que podemos recordar y usar para invocar
-   una **solución para la necesidad** de recordar operaciones individuales
-   un conjunto definido de **inputs y outputs** esperados
-   una **mayor conexión** con el ambiente de programación

Como el componente básico de la mayoría de los lenguajes de programación, las funciones definidas por el usuario constituyen la "programación" de cualquier abstracción que puedas hacer.

Si has escrito una función, eres ya todo un **programador**.

![](img/meme1.jpg){fig-align="center" width="300"}

## **Tips para generar una función**

![](img/structure_functions.png){fig-align="center"}

En R al igual que en otros lenguajes de programación podemos crear nuestras propias funciones.

La estructura de una función en R es la siguiente:

```{r, eval=FALSE}
mi_funcion <- function(parametros){
  acciones
  resultado a regresar
}
```

## **Estructuras de control**

-   Las estructuras de control nos permiten **controlar la manera en que se ejecuta nuestro código**.
-   Las estructuras de control establecen condicionales en nuestros código. Por ejemplo, qué condiciones deben cumplirse para realizar una operación o qué debe ocurrir para ejecutar una función.
-   Esto es de gran utilidad para **determinar la lógica y el orden** en que ocurren las operaciones, en especial al definir funciones.

Las estructuras de control más usadas:

| Estructura de control | Descripción                      |
|-----------------------|----------------------------------|
| `if, else`            | Si, de otro modo                 |
| `for`                 | Para cada uno en                 |
| `while`               | Mientras                         |
| `break`               | Interrupción                     |
| `next`                | Siguiente                        |
| `case_when`           | Conducional con diversas salidas |

## **`if, else`**

-   `if` (si) es usado cuando deseamos que una operación se ejecute únicamente cuando una condición se cumple.
    -   **SI** esta condición es cierta, **ENTONCES** haz estas operaciones.
-   `else` (de otro modo) es usado para indicarle a R qué hacer en caso de la condición de un if no se cumpla.
    -   **SI** esta condición es es cierta, **ENTONCES** haz estas operaciones, **DE OTRO MODO** haz estas otras operaciones.

```{r, eval=FALSE}
IF you are happy THEN
    smile
ELSE
    frown
ENDIF
```

Si se cumple la condición y se muestra "Verdadero"

```{r}
if(4 > 3) {
  "Verdadero"
} else {
  "Falso"
}
```

![](img/meme2.jpg){fig-align="center"}

## **`for` (for loop)**

Su estructura es la siguiente:

```{r, eval=FALSE}
for(elemento in objeto) {
  operacion_con_elemento
}
```

Con lo anterior le decimos a R:

-   **Para** cada elemento (contador) **en un objeto**, haz la siguiente operación.

Vamos a obtener el cuadrado de cada uno de los elementos en un vector numérico del 1 al 6, que representa las caras de un dado.

```{r for dado}
dado <- 1:6
mi_vector <- NULL # variable de almacen, vector vacio
# Cara es el contador, que agarra CADA valor de dado
# Empezando con 1 hasta el 6, teniendo 6 iteraciones
for(cara in dado) {
  mi_vector[cara] <- cara ^ 2
}
mi_vector
```

## **`while`**

Este es un tipo de bucle que ocurre **mientras** una condición es verdadera (TRUE). La operación se realiza hasta que se se llega a cumplir un criterio previamente establecido.

El modelo de `while` es:

```{r, eval=FALSE}
while(condicion){
  operaciones
}
```

Con esto le decimos a R:

-   **MIENTRAS** esta condición sea **VERDADERA**, haz estas operaciones.

La condición generalmente es expresada como el resultado de una o varias operaciones de comparación, pero también puede ser el resultado de una función.

Ejemplo:

-   Primero, tomará un número al azar del 1 al 10, y lo sumará a valor.

-   Segundo, le sumará 1 a conteo cada que esto ocurra, de esta manera sabremos cuántas iteraciones ocurrieron para llegar a un valor que no sea menor a 50.

```{r while dado}
# declarar dos vectores vacios
conteo <-  0
valor <- 0
while(valor < 50) {
  # Sample va UN valor aleatorio de 1 a 10
  valor <- valor + sample(x = 1:10, size = 1) 
  conteo <- conteo + 1
}
valor
conteo
```

El ciclo se va a repetir mientras `valor` sea menos a 50.

### **Cuando la condición no es TRUE, no pasa nada**

```{r}
conteo <- 0
while("dado" == "ficha") {
  conteo <- conteo + 1
}
conteo
```

## **`break y next`**

`break` y `next` son palabras reservadas en R, *no podemos asignarles nuevos valores* y realizan una operación específica cuando aparecen en nuestro código.

`break` nos permite **interrumpir** un bucle, mientras que next nos deja avanzar a la **siguiente** iteración del bucle, "saltándose" la actual. Ambas funcionan para `for` y `while`.

### **Usando `break`**

Para interrumpir un bucle con `break`, **necesitamos que se cumpla una condición**. Cuando esto ocurre, el bucle se detiene, aunque existan elementos a los cuales aún podría aplicarse.

Interrumpimos un for cuando `i` es igual a 3, aunque aún queden 7 elementos en el objeto.

```{r}
for(i in 1:10) {
  if(i == 3) {
    break
  }
  print(i)
}
```

### **Usando `break` y `while`**

```{r}
numero <- 20
while(numero > 5) {
  if(numero == 15) {
    break
  }
  numero <- numero - 1
}
numero
```

### **Usando `next`**

Por su parte, usamos next para "saltarnos" una iteración en un bucle. Cuando la condición se cumple, esa iteración es omitida.

```{r}
for(i in 1:4) {
  if(i == 3) {
    next
  }
  print(i)
}
```

## **`case_when()`**

Esquema general:

```{r, eval=FALSE}
INPUT color
CASE color of
    red: PRINT "red"
    green: PRINT "green"
    blue: PRINT "blue"
OTHERS
    PRINT "Please enter a value color"
ENDCASE
```

Ejemplo:

```{r}
library(dplyr)
x <- 1:20
case_when(
  x %% 35 == 0 ~ "fizz buzz",
  x %% 5 == 0 ~ "fizz",
  x %% 7 == 0 ~ "buzz",
  .default = as.character(x)
)
```

# Gapminder

[La fundación Gapminder](https://www.gapminder.org/)[7](https://bookdown.org/dparedesi/data-science-con-r/gapminder.html#fn7) es una organización sin fines de lucro con sede en Suecia que promueve el desarrollo global mediante el uso de estadísticas que pueden ayudar a reducir mitos comunes e historias sensasionalistas sobre la salud y la economía mundial. Una selección importante de datos ya está cargada en la librería `dslabs` en el data frame `gapminder`.

## Actividad grupal

Formular preguntas es una forma muy útil de limitar el numero exponencial de caminos a tomar, en particular las preguntas concisas y las hipótesis pueden servir para eliminar el numero de dimensiones y variables que nos son inmediatamente relevantes para responderlas.

Las siguientes preguntas se toman cómo ejemplo para nuestro análisis:

1.  ¿Qué país tiene la esperanza de vida más alta en 2007?
2.  ¿Qué país tiene el aumento más drástico en la esperanza de vida entre 2007 y 2002?
3.  ¿Hay algún país que haya aumentado en su esperanza de vida en los últimos años?
4.  ¿Hay algún país que hayan descendido en su esperanza de vida en los últimos años?

### Paso 1. Leer los datos y ver la estructura

```{r paquetes}
library(gapminder) # paquete de cran
library(tidyverse)
gap <- gapminder
head(gap)
```

```{r}
str(gap)
```

¿Qué nos dicen las columnas?

-   **country**: factor with 142 levels
-   **continent**: factor with 5 levels
-   **year**: oscila entre 1952 y 2007 en incrementos de 5 años
-   **lifeExp**: esperanza de vida al nacer, en años
-   **pop**: población
-   **gdpPercap**: GDP per capita (US\$, inflation-adjusted) / PIB per cápita (US\$, ajustado a la inflación)

### Paso 2. Seleccionar variables

Una vez que determinamos que nuestra data esta completa y que conocemos la estructura de nuestras variables, podemos limpiar nuestra información, revisando los formatos de fechas, quitando NA's y NULL, así como eliminar la información que no arroja valor para responder nuestras preguntas.

```{r}
EDA <- gap %>% 
  select(country, year, lifeExp)
head(EDA)
```

### Paso 3. ¿Qué país tiene la esperanza de vida más alta en 2007?

Nuestra primera aproximación sería realizar un ranking de los páises con la esperanza de vida más alta del 2007 lo cuál podemos realizarlo muy facilmente usando la función `arrange().`

```{r solucion1}
Ranking <- EDA %>% 
  filter(year == 2007) %>% 
  arrange(desc(lifeExp))

head(Ranking)
```

Concluimos que la resuesta es **Japón** con 82.6 años

### **Paso 4.** ¿Qué país tiene el aumento más drástico en la esperanza de vida entre 2007 y 2002?

En este caso la solución requiere que hagamos ajustes a nuestra tabla para poder calcular una nueva variable llamada *delta* que es la diferencia entre la esperanza de vida del 2007 VS la de 2002.

```{r}
# Extraer datos de 2002
Y2002 <- EDA %>% 
  filter(year == 2002) %>%
  rename(LExp2002 = lifeExp) %>% 
  select(-year)
# Extraer datos de 2007
Y2007 <- EDA %>% 
  filter(year == 2007) %>%
  rename(LExp2007 = lifeExp) %>% 
  select(-year)
# Unir informacion por columnas
LifeExpDelta <- merge(Y2002,Y2007)
# Obtener el valor de Delta (diferencia entre la esperanza de vida)
Delta <- LifeExpDelta %>%
  mutate(delta = (LExp2007-LExp2002)/LExp2002) %>% 
  arrange(desc(delta))
head(Delta)
```

**Botswana** es el pais con el aumento mas drastico en la esperanza de vida.

### Paso 5. ¿Hay algún país que haya aumentado en su esperanza de vida en los últimos años?

```{r}
gap %>%
  group_by(continent, country) %>%
  select(country, year, continent, lifeExp) %>%
  mutate(le_delta = lifeExp - lag(lifeExp, 1)) %>%
  summarize(best_le_delta = max(le_delta, na.rm = TRUE)) %>%
  arrange(-best_le_delta) %>%
  head(5)
```

### Paso 6. ¿Hay algún país que haya descendido en su esperanza de vida en los últimos años?

```{r}
gap %>%
  group_by(continent, country) %>%
  select(country, year, continent, lifeExp) %>%
  mutate(le_delta = lifeExp - lag(lifeExp, 1)) %>%
  summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
  arrange(worst_le_delta) %>%
  head(5)
```

::: {.callout-note icon="false"}
## Ejercicio 1 (20 min)

1.  Apartir de los datos de gapminder, calcula la media la esperanza de vida por continente y año y preséntala como un data.frame. ¿Cuál continente tuvo la mayor y menor esperanza de vida en el año 1952 y 2007?

2.  Empleando el dataset de `iris`, crea un data.frame con la media, el valor máximo y mínimo de cada una de las variables agrupado por especie.

3.  Explora la [página](https://vincentarelbundock.github.io/Rdatasets/articles/data.html) y busca una base de datos donde puedas aplicar las funciones anteriores y que tenga sentido lo que estás presentando de resultados.
:::

## Material suplementario

-   [Software Carpentry - funciones](https://swcarpentry.github.io/r-novice-gapminder-es/10-functions.html)
-   [Writing Functions in R](https://www.r-bloggers.com/2022/09/writing-functions-in-r/)
-   [Package "gapminder"](https://cran.r-project.org/web/packages/gapminder/gapminder.pdf)
-   [EDA Gapminder](https://rpubs.com/jcorona/563320)
-   Haydee tutorial: [Temas Selectos de Análisis Numérico y Computación Científica: Computo científico para el análisis de datos](https://haydeeperuyero.github.io/Computo_Cientifico/)
